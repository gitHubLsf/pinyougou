<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

<!--    静态资源不拦截-->
    <http pattern="/css/**" security="none" />
    <http pattern="/data/**" security="none" />
    <http pattern="/fonts/**" security="none" />
    <http pattern="/img/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/plugins/**" security="none" />

<!--    购物车前台首页不拦截-->
    <http pattern="/cart.html" security="none" />

    <!--
    <http pattern="/cart/findCartListFromCookie.do" security="none" />
    <http pattern="/cart/addGoodsToCartList.do" security="none" />
    -->

    <!--   entry-point-ref  入口点引用 -->
    <http use-expressions="false" entry-point-ref="casProcessingFilterEntryPoint">
        <intercept-url pattern="/cart/findCartList.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/cart/addGoodsToCartList.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
<!--        上述两个地址会被 springSecurity 拦截，生产 security 上下文对象，-->
<!--        但是不会要求用户登录，通过 security 上下文获取的在线用户名是 anonymousUser-->
<!--        如果将这两个地址写在 http pattern="o" security="none" 中放行，那么就不会被 springSecurity 拦截，-->
<!--        不会有 security 上下文对象，那么尝试获取在线用户名时，会报上下文对象空指针异常-->

        <intercept-url pattern="/**" access="ROLE_USER"/>
        <csrf disabled="true"/>
        <!-- custom-filter为过滤器，
            position 表示将过滤器放在指定的位置上，
            before表示放在指定位置之前，
            after表示放在指定的位置之后  -->
        <custom-filter ref="casAuthenticationFilter" position="CAS_FILTER"/>
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
    </http>


    <!-- CAS入口点 开始 -->
    <beans:bean id="casProcessingFilterEntryPoint"
                class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <!-- 单点登录服务器登录URL -->
        <beans:property name="loginUrl" value="http://localhost:8080/cas/login"/>
        <beans:property name="serviceProperties" ref="serviceProperties"/>
    </beans:bean>
    <beans:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <!--service 配置自身工程的根地址+/login/cas   -->
        <beans:property name="service" value="http://localhost:9107/login/cas"/>
    </beans:bean>
    <!-- CAS入口点 结束 -->


    <!-- 认证过滤器 开始 -->
    <beans:bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
    </beans:bean>

    <!-- 认证管理器 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="casAuthenticationProvider">
        </authentication-provider>
    </authentication-manager>

    <!-- 认证提供者 -->
    <beans:bean id="casAuthenticationProvider"
                class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <beans:property name="authenticationUserDetailsService">
            <beans:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <beans:constructor-arg ref="userDetailsService"/>
            </beans:bean>
        </beans:property>
        <beans:property name="serviceProperties" ref="serviceProperties"/>

        <!-- ticketValidator 为票据验证器 -->
        <beans:property name="ticketValidator">
            <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <beans:constructor-arg index="0" value="http://localhost:8080/cas"/>
            </beans:bean>
        </beans:property>
        <beans:property name="key" value="an_id_for_this_auth_provider_only"/>
    </beans:bean>

    <!-- 自定义认证类 -->
    <beans:bean id="userDetailsService" class="com.lsf.pinyougou.cart.service.UserDetailServiceImpl"/>

    <!-- 认证过滤器 结束 -->


    <!-- 单点登出  开始  -->
<!--    这个 bean 是真正实现单点登出功能的类-->
    <beans:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

<!--    这个 bean 是单点登录功能的代理类-->
<!--    我们只要在自己的工程中请求 自身工程的根地址+/logout/cas 就可以向 CAS 服务端请求 CAS 服务器根地址 + /cas/logout?service=XXX
        例如此处退出登录后跳转到的地址是 http://localhost:9103 也就是我们的网站门户前台工程

-->
    <beans:bean id="requestSingleLogoutFilter"
                class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <beans:constructor-arg value="http://localhost:8080/cas/logout?service=http://localhost:9103"/>
        <beans:constructor-arg>
            <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </beans:constructor-arg>
        <beans:property name="filterProcessesUrl" value="/logout/cas"/>
    </beans:bean>
    <!-- 单点登出  结束 -->

</beans:beans>