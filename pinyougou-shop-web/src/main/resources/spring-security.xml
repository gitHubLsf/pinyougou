<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
			 http://www.springframework.org/schema/security
			 http://www.springframework.org/schema/security/spring-security.xsd
             http://code.alibabatech.com/schema/dubbo
             http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 以下页面不被拦截 -->
    <http pattern="/*.html" security="none"></http>
    <http pattern="/css/**" security="none"></http>
    <http pattern="/img/**" security="none"></http>
    <http pattern="/js/**" security="none"></http>
    <http pattern="/plugins/**" security="none"></http>

<!--    商家提交入住申请时，不需要拦截-->
    <http pattern="/seller/add.do" security="none"></http>

    <!-- 页面拦截规则 -->
    <http use-expressions="false">
        <intercept-url pattern="/**" access="ROLE_SELLER"/>
        <form-login login-processing-url="/login" login-page="/shoplogin.html" default-target-url="/admin/index.html"
                    authentication-failure-url="/shoplogin.html" always-use-default-target="true"/>
		<csrf disabled="true"/>
        <headers>
            <frame-options policy="SAMEORIGIN"/>
        </headers>
        <logout/>
    </http>

<!--    远程的服务层对象-->
    <dubbo:application name="pinyougou-shop-web" />
    <dubbo:registry address="zookeeper://192.168.25.10:2181"/>
    <dubbo:reference id="sellerService" interface="com.lsf.pinyougou.sellergoods.service.SellerService" />

    <!--    自定义认证类-->
    <beans:bean id="userDetailsServiceImpl" class="com.lsf.pinyougou.shop.service.UserDetailsServiceImpl">
<!--        使用 setter 方法注入 SellerService 服务层对象, 由于本地只有接口，不能注入，需要使用 dubbo 调用远程的服务层对象 -->
        <beans:property name="sellerService" ref="sellerService" />
    </beans:bean>

    <!-- 认证管理器 -->
    <authentication-manager>
<!--        让认证器提供者调用自定义认证类对象-->
        <authentication-provider user-service-ref="userDetailsServiceImpl">
            <password-encoder ref="bCryptPasswordEncoder"></password-encoder>
        </authentication-provider>
    </authentication-manager>

<!--    加密算法对象-->
    <beans:bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans:beans>